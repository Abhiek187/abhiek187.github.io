{"version":3,"sources":["tsx/App.tsx","tsx/About.tsx","tsx/Projects.tsx","tsx/Contact.tsx","tsx/serviceWorker.tsx","index.tsx"],"names":["Direction","About","onClickLink","useEffect","document","title","querySelector","classList","add","remove","className","src","alt","width","height","to","aria-label","onClick","Projects","isDarkMode","colors","JSON","parse","stringify","colorData","projects","projectData","data-testid","map","project","name","image","about","technology","tech","website","href","target","rel","repo","id","Contact","withRouter","location","useState","Left","slideDirection","setSlideDirection","setIsDarkMode","window","hash","navbar","navPosition","offsetTop","onscroll","pageYOffset","htmlDecode","input","DOMParser","parseFromString","documentElement","textContent","setSlider","dest","Right","htmlFor","type","TransitionGroup","CSSTransition","timeout","enter","exit","classNames","exact","path","process","pathname","Boolean","hostname","match","ReactDOM","render","StrictMode","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.970358ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Route,\r\n  Link,\r\n  Switch,\r\n  withRouter,\r\n  RouteComponentProps,\r\n} from \"react-router-dom\";\r\n// import SwipeableRoutes from \"react-swipeable-routes\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nimport \"../scss/App.scss\";\r\nimport About from \"./About\";\r\nimport Projects from \"./Projects\";\r\nimport Contact from \"./Contact\";\r\n\r\n// Prop type passed to all the child components\r\nexport interface OnClickProp {\r\n  onClickLink: (dest: string) => void;\r\n}\r\n\r\n// Possible sliding directions\r\nexport enum Direction {\r\n  Left = \"left\",\r\n  Right = \"right\",\r\n}\r\n\r\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\r\n  // Determines which direction to slide the components\r\n  const [slideDirection, setSlideDirection] = useState<Direction>(\r\n    Direction.Left\r\n  );\r\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // Change the title of the tab every page change\r\n    // With a HashRouter, the pathname will always be /\r\n    if (window.location.hash === \"#/\") {\r\n      document.title = \"Abhishek Chaudhuri - Home\";\r\n    } else if (\r\n      window.location.hash !== \"#/about\" &&\r\n      window.location.hash !== \"#/projects\" &&\r\n      window.location.hash !== \"#/contact\"\r\n    ) {\r\n      document.title = \"Abhishek Chaudhuri - Error\";\r\n    }\r\n\r\n    // Check where web scroll is for sticky navbar\r\n    let navbar: HTMLElement | null = document.querySelector(\".links\");\r\n    if (navbar === null) return;\r\n    let navPosition: number = navbar.offsetTop;\r\n\r\n    window.onscroll = () => {\r\n      // If the scroll position is beyond the navbar, make it sticky\r\n      navbar = document.querySelector(\".links\");\r\n      if (navbar === null) return;\r\n      // Don't set navPosition to 0\r\n      navPosition = navbar.offsetTop === 0 ? navPosition : navbar.offsetTop;\r\n      window.pageYOffset >= navPosition\r\n        ? navbar.classList.add(\"sticky\")\r\n        : navbar.classList.remove(\"sticky\");\r\n    };\r\n  }, []); // only componentDidMount()\r\n\r\n  const htmlDecode = (input: string): string | null => {\r\n    // Unescape HTML characters (https://stackoverflow.com/a/34064434)\r\n    const doc = new DOMParser().parseFromString(input, \"text/html\");\r\n    return doc.documentElement.textContent;\r\n  };\r\n\r\n  const setSlider = (dest: string): void => {\r\n    // Check where to slide the components\r\n    if (window.location.hash === \"#/contact\") {\r\n      // At Contact, always slide right\r\n      setSlideDirection(Direction.Right);\r\n    } else if (window.location.hash === \"#/projects\") {\r\n      // At Projects, check which link was clicked\r\n      if (dest === \"about\") {\r\n        setSlideDirection(Direction.Right);\r\n      } else {\r\n        setSlideDirection(Direction.Left);\r\n      }\r\n    } else {\r\n      // At About, always slide left (default)\r\n      setSlideDirection(Direction.Left);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`App ${isDarkMode ? \"dark\" : \"\"}`}>\r\n      {/* Switch to toggle between light and dark mode */}\r\n      <div className=\"theme-container form-check form-switch\">\r\n        <label\r\n          className=\"theme-label form-check-label\"\r\n          htmlFor=\"theme-switch\"\r\n          aria-label={isDarkMode ? \"dark mode on\" : \"dark mode off\"}\r\n        >\r\n          {isDarkMode ? htmlDecode(\"&#x1F31C;\") : htmlDecode(\"&#x1F31E;\")}\r\n        </label>\r\n        <input\r\n          className=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          id=\"theme-switch\"\r\n          onClick={() => setIsDarkMode(!isDarkMode)}\r\n        />\r\n      </div>\r\n      <header className=\"heading container-fluid\">\r\n        <h1 className=\"heading-name\">Abhishek Chaudhuri</h1>\r\n        <h2 className=\"heading-headline\">\r\n          Software Engineer | Always Learning and Growing\r\n        </h2>\r\n      </header>\r\n      <nav className=\"links container-fluid btn-group\">\r\n        {/* Redirect routes without reloading the browser */}\r\n        <Link\r\n          className=\"links-about btn btn-danger\"\r\n          to=\"/about\"\r\n          onClick={() => setSlider(\"about\")}\r\n        >\r\n          About\r\n        </Link>\r\n        <Link\r\n          className=\"links-projects btn btn-warning\"\r\n          to=\"/projects\"\r\n          onClick={() => setSlider(\"projects\")}\r\n        >\r\n          Projects\r\n        </Link>\r\n        <Link\r\n          className=\"links-contact btn btn-success\"\r\n          to=\"/contact\"\r\n          onClick={() => setSlider(\"contact\")}\r\n        >\r\n          Contact\r\n        </Link>\r\n      </nav>\r\n      <hr />\r\n      <TransitionGroup\r\n        className={`transition-group ${slideDirection}`}\r\n        data-testid=\"transition\"\r\n      >\r\n        <CSSTransition\r\n          key={location.pathname}\r\n          timeout={{ enter: 600, exit: 600 }}\r\n          classNames={\"slide\"}\r\n        >\r\n          <Switch location={location}>\r\n            {/* Ensure route works with any website url */}\r\n            <Route exact path={`${process.env.PUBLIC_URL}/`}>\r\n              {/* Default page */}\r\n              <main className=\"home container-fluid\">\r\n                <p className=\"home-info\">\r\n                  Hello and welcome to my website! Please click the links above\r\n                  to learn more about me.\r\n                </p>\r\n              </main>\r\n            </Route>\r\n            <Route path={`${process.env.PUBLIC_URL}/about`}>\r\n              <About onClickLink={setSlider} />\r\n            </Route>\r\n            <Route path={`${process.env.PUBLIC_URL}/projects`}>\r\n              <Projects onClickLink={setSlider} isDarkMode={isDarkMode} />\r\n            </Route>\r\n            <Route path={`${process.env.PUBLIC_URL}/contact`}>\r\n              <Contact onClickLink={setSlider} isDarkMode={isDarkMode} />\r\n            </Route>\r\n            {/* Ignore paths that take you to other repos, otherwise redirect to error page */}\r\n            <Route>\r\n              <main className=\"error container-fluid\">\r\n                <p\r\n                  className={`error-message ${\r\n                    isDarkMode ? \"text-warning\" : \"text-danger\"\r\n                  }`}\r\n                >\r\n                  Whoops! That path is invalid. Please click the links above.\r\n                </p>\r\n              </main>\r\n            </Route>\r\n          </Switch>\r\n        </CSSTransition>\r\n      </TransitionGroup>\r\n      <hr />\r\n      <footer className=\"foot container-fluid\">\r\n        <span className=\"foot-left\">\r\n          Made using{\" \"}\r\n          <a\r\n            className=\"foot-react\"\r\n            href=\"https://reactjs.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React\r\n          </a>\r\n          <img\r\n            className=\"foot-react-img\"\r\n            src=\"/img/logo.svg\"\r\n            alt=\"React logo (an atom)\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n          />\r\n        </span>\r\n        <span className=\"foot-right\">\r\n          <a\r\n            className=\"foot-mit\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://github.com/Abhiek187/abhiek187.github.io/blob/main/LICENSE\"\r\n          >\r\n            MIT License\r\n          </a>{\" \"}\r\n          Copyright &copy; 2019 Abhishek Chaudhuri\r\n        </span>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(App); // Get access to match, location, and history\r\n","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../scss/About.scss\";\r\nimport { OnClickProp } from \"./App\";\r\n\r\nconst About: React.FC<OnClickProp> = ({ onClickLink }) => {\r\n  useEffect(() => {\r\n    document.title = \"Abhishek Chaudhuri - About\";\r\n    document.querySelector(\".links-about\")?.classList.add(\"active\");\r\n    document.querySelector(\".links-projects\")?.classList.remove(\"active\");\r\n    document.querySelector(\".links-contact\")?.classList.remove(\"active\");\r\n  }, []);\r\n\r\n  // Forward slashes (\\) prevent all the newlines from being rendered\r\n  const bio: string = `\r\n  Why hello there! My name is Abhishek. I'm a software engineer with a desire to innovate and \\\r\n  improve society one line of code at a time. Whether it's a website, a mobile app, or an API, I \\\r\n  enjoy building applications that benefit the end-user.\r\n\r\n  The three words I live by are dream, conquer, and inspire. I dream of the opportunities that lie \\\r\n  ahead. I conquer the challenges that come my way. And I inspire others by helping them go through a \\\r\n  similar journey. The cycle always repeats itself as new challenges present themselves.\r\n\r\n  I'm a recent graduate of Rutgers University-New Brunswick. I studied Electrical & Computer \\\r\n  Engineering as an undergraduate and Software Engineering as a graduate. During my time, I joined \\\r\n  the N2E coding club where I taught students how to code from Novice 2 Expert. Pretty soon, I was \\\r\n  promoted to being the marketing director to increase the outreach of the club. After that, I became \\\r\n  the president of N2E, where I handled the process of recruiting 11 instructors and managing \\\r\n  workshops in 7 different languages. Through my time and commitment, I increased workshop attendance \\\r\n  by 40% and earned a Leadership & Service Award from Rutgers.\r\n  \r\n  My interests include front-end web and mobile development and machine learning. I regularly work on \\\r\n  and improve my projects on GitHub. Some of my past projects include a space shooter created in iOS, \\\r\n  an Android game that uses machine learning to recognize handwritten digits, a cheat sheet of all \\\r\n  the languages I know, and of course, this very website!\r\n\r\n  Besides coding, I enjoy exercising, playing the flute, and playing video games in my spare time.\r\n  \r\n  In the future, I plan to expand my knowledge of front-end and back-end development and become a \\\r\n  full-stack developer.\r\n  `;\r\n\r\n  return (\r\n    <main className=\"about container-fluid\">\r\n      <div className=\"about-wrapper\">\r\n        <h3 className=\"about-heading\">About</h3>\r\n        <div className=\"about-container\">\r\n          <img\r\n            className=\"about-headshot\"\r\n            src=\"/img/Headshot.png\"\r\n            alt=\"Headshot of Abhishek\"\r\n            width=\"233.33\"\r\n            height=\"175\"\r\n          />\r\n          <p className=\"about-bio\">{bio}</p>\r\n        </div>\r\n      </div>\r\n      <Link\r\n        className=\"arrow-right\"\r\n        to=\"/projects\"\r\n        aria-label=\"Go to Projects\"\r\n        onClick={() => onClickLink(\"projects\")}\r\n      >\r\n        <i className=\"fas fa-arrow-right\" />\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../scss/Projects.scss\";\r\nimport colorData from \"../models/colors.json\";\r\nimport projectData from \"../models/projects.json\";\r\nimport { OnClickProp } from \"./App\";\r\n\r\n// Type definitions of the JSON files\r\ninterface Project {\r\n  id: string;\r\n  name: string;\r\n  image: string;\r\n  about: string;\r\n  technology: [string];\r\n  website: string | null;\r\n  repo: string;\r\n}\r\n\r\nexport type ColorsJSON = { [key: string]: string };\r\nexport type ProjectsJSON = [Project];\r\n\r\n// Extend the OnClickProp interface\r\ntype ProjectsProps = OnClickProp & {\r\n  isDarkMode: boolean;\r\n};\r\n\r\nconst Projects: React.FC<ProjectsProps> = ({ onClickLink, isDarkMode }) => {\r\n  useEffect(() => {\r\n    document.title = \"Abhishek Chaudhuri - Projects\";\r\n    document.querySelector(\".links-about\")?.classList.remove(\"active\");\r\n    document.querySelector(\".links-projects\")?.classList.add(\"active\");\r\n    document.querySelector(\".links-contact\")?.classList.remove(\"active\");\r\n  }, []);\r\n\r\n  // Extract JSON data as an array\r\n  const colors: ColorsJSON = JSON.parse(JSON.stringify(colorData));\r\n  const projects: ProjectsJSON = JSON.parse(JSON.stringify(projectData));\r\n\r\n  return (\r\n    <main className=\"projects container-fluid\">\r\n      <Link\r\n        className=\"arrow-left\"\r\n        to=\"/about\"\r\n        aria-label=\"Go to About\"\r\n        onClick={() => onClickLink(\"about\")}\r\n      >\r\n        <i className=\"fas fa-arrow-left\" />\r\n      </Link>\r\n      <div className=\"projects-wrapper\">\r\n        <h3 className=\"projects-heading\">Projects</h3>\r\n        <ul className=\"projects-list\" data-testid=\"projects-list\">\r\n          {projects.map((project) => (\r\n            /* Each list item needs a key */\r\n            <li\r\n              key={project.id}\r\n              className={`card ${\r\n                isDarkMode\r\n                  ? \"text-light bg-dark border-light\"\r\n                  : \"text-dark bg-light border-dark\"\r\n              }`}\r\n            >\r\n              <h4 className=\"projects-name card-title\">{project.name}</h4>\r\n              <img\r\n                className=\"projects-image card-img-top\"\r\n                src={project.image}\r\n                alt={`Screenshot of ${project.name}`}\r\n              />\r\n              <p className=\"projects-about card-text\">{project.about}</p>\r\n              <p\r\n                className={`projects-technology-header ${\r\n                  isDarkMode ? \"text-info\" : \"\"\r\n                }`}\r\n              >\r\n                Made Using:\r\n              </p>\r\n              <div className=\"projects-technology-container\">\r\n                {project.technology.map((tech) => (\r\n                  <p\r\n                    key={tech}\r\n                    className={`projects-technology badge bg-${colors[tech]}`}\r\n                  >\r\n                    {tech}\r\n                  </p>\r\n                ))}\r\n              </div>\r\n              {/* If no project link is directly available, follow the directions on GitHub */}\r\n              <div className=\"projects-links\">\r\n                {project.website && (\r\n                  <a\r\n                    className=\"projects-website btn btn-outline-success\"\r\n                    href={project.website}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <i className=\"fas fa-external-link-alt\" /> Demo\r\n                  </a>\r\n                )}\r\n                <a\r\n                  className=\"projects-repo btn btn-outline-primary\"\r\n                  href={project.repo}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  <i className=\"fab fa-github\" /> GitHub\r\n                </a>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"projects-addendum\">\r\n          ...And much more on{\" \"}\r\n          <a\r\n            className=\"projects-github-link\"\r\n            href=\"https://github.com/abhiek187\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            GitHub!\r\n          </a>\r\n        </p>\r\n      </div>\r\n      <Link\r\n        className=\"arrow-right\"\r\n        to=\"/contact\"\r\n        aria-label=\"Go to Contact\"\r\n        onClick={() => onClickLink(\"contact\")}\r\n      >\r\n        <i className=\"fas fa-arrow-right\" />\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../scss/Contact.scss\";\r\nimport { OnClickProp } from \"./App\";\r\n\r\ntype ContactProps = OnClickProp & {\r\n  isDarkMode: boolean;\r\n};\r\n\r\nconst Contact: React.FC<ContactProps> = ({ onClickLink, isDarkMode }) => {\r\n  useEffect(() => {\r\n    document.title = \"Abhishek Chaudhuri - Contact\";\r\n    document.querySelector(\".links-about\")?.classList.remove(\"active\");\r\n    document.querySelector(\".links-projects\")?.classList.remove(\"active\");\r\n    document.querySelector(\".links-contact\")?.classList.add(\"active\");\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"contact container-fluid\">\r\n      <Link\r\n        className=\"arrow-left\"\r\n        to=\"/projects\"\r\n        aria-label=\"Go to Projects\"\r\n        onClick={() => onClickLink(\"projects\")}\r\n      >\r\n        <i className=\"fas fa-arrow-left\" />\r\n      </Link>\r\n      <div className=\"contact-wrapper\">\r\n        <h3 className=\"contact-heading\">Contact</h3>\r\n        {/* Each link opens in a new tab */}\r\n        <span className=\"contact-row\">\r\n          <a\r\n            className=\"contact-resume btn btn-outline-danger\"\r\n            href=\"resume.pdf\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fas fa-file-pdf\" /> Resume\r\n          </a>\r\n          <a\r\n            className=\"contact-linkedin btn btn-outline-primary\"\r\n            href=\"https://www.linkedin.com/in/abhiek187\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fab fa-linkedin-in\" /> LinkedIn\r\n          </a>\r\n          <a\r\n            className={`contact-github btn btn-outline-${\r\n              isDarkMode ? \"light\" : \"dark\"\r\n            }`}\r\n            href=\"https://github.com/abhiek187\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fab fa-github\" /> GitHub\r\n          </a>\r\n          {/* Opens default email program */}\r\n          <a\r\n            className={`contact-email btn ${isDarkMode ? \"dark\" : \"\"}`}\r\n            href=\"mailto:achaudhuri2011@yahoo.com\"\r\n            target=\"_top\"\r\n          >\r\n            <i className=\"fas fa-envelope\" /> Email\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === \"installed\") {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log(\"New content is available; please refresh.\");\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log(\"Content is cached for offline use.\");\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./tsx/App\";\r\nimport * as serviceWorker from \"./tsx/serviceWorker\";\r\n\r\nReactDOM.render(\r\n  // Enable react router and work in GitHub Pages\r\n  <React.StrictMode>\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}